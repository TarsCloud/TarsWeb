// **********************************************************************
// Parsed By TarsParser(2.4.4), Generated By tools(20180620)
// TarsParser Maintained By <TARS> and tools Maintained By <superzheng>
// Generated from "FlowControl.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var Base = Base || {};
module.exports.Base = Base;

Base.FlowControlProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

Base.FlowControlProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

Base.FlowControlProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

Base.FlowControlProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

Base.FlowControlProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __Base_FlowControl$getGWDB$IF = {
    "name" : "getGWDB",
    "return" : "int32",
    "arguments" : [{
        "name" : "dbConf",
        "class" : "map(string, string)",
        "direction" : "out"
    }]
};

var __Base_FlowControl$getGWDB$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __Base_FlowControl$getGWDB$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "dbConf" : is.readMap(1, true, TarsStream.Map(TarsStream.String, TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __Base_FlowControl$getGWDB$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __Base_FlowControl$getGWDB$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "dbConf" : tup.readMap("dbConf", TarsStream.Map(TarsStream.String, TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __Base_FlowControl$getGWDB$ER = function (data) {
    throw _makeError(data, "Call FlowControl::getGWDB failed");
};

Base.FlowControlProxy.prototype.getGWDB = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGWDB", __Base_FlowControl$getGWDB$PE(version), arguments[arguments.length - 1], __Base_FlowControl$getGWDB$IF).then(__Base_FlowControl$getGWDB$PD, __Base_FlowControl$getGWDB$ER);
    } else {
        return this._worker.tars_invoke("getGWDB", __Base_FlowControl$getGWDB$IE(), arguments[arguments.length - 1], __Base_FlowControl$getGWDB$IF).then(__Base_FlowControl$getGWDB$ID, __Base_FlowControl$getGWDB$ER);
    }
};
Base.FlowControlProxy.getGWDB = __Base_FlowControl$getGWDB$IF;

var __Base_FlowControl$report$IF = {
    "name" : "report",
    "return" : "int32",
    "arguments" : [{
        "name" : "flow",
        "class" : "map(string, int32)",
        "direction" : "in"
    }, {
        "name" : "ip",
        "class" : "string",
        "direction" : "in"
    }]
};

var __Base_FlowControl$report$IE = function (flow, ip) {
    var os = new TarsStream.TarsOutputStream();
    os.writeMap(1, flow);
    os.writeString(2, ip);
    return os.getBinBuffer();
};

var __Base_FlowControl$report$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __Base_FlowControl$report$PE = function (flow, ip, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeMap("flow", flow);
    tup.writeString("ip", ip);
    return tup;
};

var __Base_FlowControl$report$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __Base_FlowControl$report$ER = function (data) {
    throw _makeError(data, "Call FlowControl::report failed");
};

Base.FlowControlProxy.prototype.report = function (flow, ip) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("report", __Base_FlowControl$report$PE(flow, ip, version), arguments[arguments.length - 1], __Base_FlowControl$report$IF).then(__Base_FlowControl$report$PD, __Base_FlowControl$report$ER);
    } else {
        return this._worker.tars_invoke("report", __Base_FlowControl$report$IE(flow, ip), arguments[arguments.length - 1], __Base_FlowControl$report$IF).then(__Base_FlowControl$report$ID, __Base_FlowControl$report$ER);
    }
};
Base.FlowControlProxy.report = __Base_FlowControl$report$IF;



