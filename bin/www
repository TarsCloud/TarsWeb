#!/usr/bin/env node
/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');
const logger = require('../app/logger')
const webConf = require('../config/webConf').webConf;
const cluster = require('cluster');
const os = require('os');
const tarsInit = require('../app/init/tars');

//获取端口
const port = normalizePort(process.env.PORT || webConf.port || '3000');
const enableMultiProcess = false;

const LdapService = require('../sso/app/service/ldap/LdapService')
const CronService = require('../sso/app/service/ldap/CronService')

//创建服务
try {
	//加载发布包
	tarsInit.preparePatch();

	//优先环境变量生效
	if(process.env.TARS_WEB_STRICT) {
		webConf.strict = (process.env.TARS_WEB_STRICT == "true");
	}

	let numCpus = os.cpus().length;
	if (cluster.isMaster && enableMultiProcess) {
		for (let i = 0; i < numCpus; i++) {
			cluster.fork();
		}
		cluster.on('listening', function (worker, address) {
		});
		let processNum = numCpus;
		cluster.on('exit', function (worker, code, signal) {
			processNum--;
			console.error('worker ' + worker.process.pid + ' died');
			if (!processNum) {
				throw(new Error('Server startup failed'));
			}
		});
	} else if (cluster.isWorker || !enableMultiProcess) {
		let server = http.createServer(app.callback());
		server.listen(port, '0.0.0.0', function () {
			logger.info('Server has been started successfully');
		});
		server.on('error', onError);
		
		// 初始化LDAP创建
        	LdapService.init();
        	// 注册定时任务
        	CronService.start();
	}
} catch (e) {
	logger.error(e.toString())
}


//标准化端口值
function normalizePort(val) {
	let port = parseInt(val, 10);
	if (isNaN(port)) {
		return val;
	}
	if (port >= 0) {
		return port;
	}
	return false;
}


// 服务错误回调
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	switch (error.code) {
		case 'EACCES':
			logger.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			logger.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

//服务监听事件
function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

